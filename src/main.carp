(load "serial.carp")
(load "wifi.carp")

(use Array)

(defn times-three [x] (* 3 x))

(defn divisible-by-two? [x] (= (mod @x 2) 0))

(defn concat-with-hello-carp [a]
  (String.concat &[(str a), @". " @"Hello Carp!"]))

(defn println-strings! [strings]
  (foreach [str strings]
    (Serial.println str)))

(defn setup []
   (do
     (Serial.init 74880l)
     (Wifi.set-mode 1)
     (Wifi.disconnect)
     (==> (range 1 9 1)
          (endo-map &times-three)
          (endo-filter &divisible-by-two?)
          (ref)
          (copy-map &concat-with-hello-carp)
          (ref)
          (println-strings!))))

(defn loop []
   (let [numberOfNetwork (Wifi.scan-network)]
     (Serial.println &(Wifi.get-ssid 0))))

